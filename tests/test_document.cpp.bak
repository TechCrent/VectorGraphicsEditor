#include <gtest/gtest.h>
#include <QApplication>
#include "../include/document.h"
#include "../include/rectangle.h"
#include "../include/ellipse.h"

class DocumentTest : public ::testing::Test {
protected:
    void SetUp() override {
        document = new Document();
    }
    
    void TearDown() override {
        delete document;
    }
    
    Document* document = nullptr;
};

class LayerTest : public ::testing::Test {
protected:
    void SetUp() override {
        layer = new Layer("Test Layer");
    }
    
    void TearDown() override {
        delete layer;
    }
    
    Layer* layer = nullptr;
};

// Layer Tests
TEST_F(LayerTest, LayerCreation) {
    EXPECT_EQ(layer->getName(), "Test Layer");
    EXPECT_TRUE(layer->isVisible());
    EXPECT_FALSE(layer->isLocked());
    EXPECT_EQ(layer->getShapes().size(), 0);
}

TEST_F(LayerTest, LayerProperties) {
    layer->setName("New Name");
    EXPECT_EQ(layer->getName(), "New Name");

    layer->setVisible(false);
    EXPECT_FALSE(layer->isVisible());
    layer->setVisible(true);
    EXPECT_TRUE(layer->isVisible());

    layer->setLocked(true);
    EXPECT_TRUE(layer->isLocked());
    layer->setLocked(false);
    EXPECT_FALSE(layer->isLocked());
}

TEST_F(LayerTest, LayerShapeManagement) {
    Rectangle* rect = new Rectangle(QPointF(10, 20), QSizeF(30, 40));
    Ellipse* ellipse = new Ellipse(QPointF(50, 60), QSizeF(70, 80));

    layer->addShape(rect);
    layer->addShape(ellipse);

    EXPECT_EQ(layer->getShapes().size(), 2);
    EXPECT_TRUE(layer->getShapes().contains(rect));
    EXPECT_TRUE(layer->getShapes().contains(ellipse));

    layer->removeShape(rect);
    EXPECT_EQ(layer->getShapes().size(), 1);
    EXPECT_FALSE(layer->getShapes().contains(rect));
    EXPECT_TRUE(layer->getShapes().contains(ellipse));

    layer->clear();
    EXPECT_EQ(layer->getShapes().size(), 0);
}

TEST_F(LayerTest, LayerAddNullShape) {
    layer->addShape(nullptr);
    EXPECT_EQ(layer->getShapes().size(), 0);
}

TEST_F(LayerTest, LayerRemoveNonExistentShape) {
    Rectangle* rect = new Rectangle();
    EXPECT_NO_THROW(layer->removeShape(rect));
    delete rect;
}

// Document Tests
TEST_F(DocumentTest, DocumentCreation) {
    EXPECT_EQ(document->getLayers().size(), 1);
    EXPECT_EQ(document->getSize(), QSizeF(800, 600));
}

TEST_F(DocumentTest, DocumentSize) {
    QSizeF newSize(1200, 900);
    document->setSize(newSize);
    EXPECT_EQ(document->getSize(), newSize);
}

TEST_F(DocumentTest, DocumentLayerManagement) {
    Layer* layer1 = new Layer("Layer 1");
    Layer* layer2 = new Layer("Layer 2");

    document->addLayer(layer1);
    document->addLayer(layer2);

    EXPECT_EQ(document->getLayers().size(), 3);
    EXPECT_TRUE(document->getLayers().contains(layer1));
    EXPECT_TRUE(document->getLayers().contains(layer2));

    document->removeLayer(layer1);
    EXPECT_EQ(document->getLayers().size(), 2);
    EXPECT_FALSE(document->getLayers().contains(layer1));
    EXPECT_TRUE(document->getLayers().contains(layer2));

    document->clear();
    EXPECT_EQ(document->getLayers().size(), 0);
}

TEST_F(DocumentTest, DocumentAddNullLayer) {
    document->addLayer(nullptr);
    EXPECT_EQ(document->getLayers().size(), 1);
}

TEST_F(DocumentTest, DocumentShapeRetrieval) {
    Layer* layer1 = new Layer("Layer 1");
    Layer* layer2 = new Layer("Layer 2");

    Rectangle* rect = new Rectangle(QPointF(10, 20), QSizeF(30, 40));
    Ellipse* ellipse = new Ellipse(QPointF(50, 60), QSizeF(70, 80));

    layer1->addShape(rect);
    layer2->addShape(ellipse);

    document->addLayer(layer1);
    document->addLayer(layer2);

    Shape* foundShape = document->getShapeAt(QPointF(25, 35));
    EXPECT_EQ(foundShape, rect);

    foundShape = document->getShapeAt(QPointF(85, 100));
    EXPECT_EQ(foundShape, ellipse);

    foundShape = document->getShapeAt(QPointF(0, 0));
    EXPECT_EQ(foundShape, nullptr);
}

TEST_F(DocumentTest, DocumentShapeRetrievalInvisibleLayer) {
    Layer* layer = new Layer("Layer");
    Rectangle* rect = new Rectangle(QPointF(10, 20), QSizeF(30, 40));

    layer->addShape(rect);
    layer->setVisible(false);
    document->addLayer(layer);

    Shape* foundShape = document->getShapeAt(QPointF(25, 35));
    EXPECT_EQ(foundShape, nullptr);
}

TEST_F(DocumentTest, DocumentShapeRetrievalInvisibleShape) {
    Layer* layer = new Layer("Layer");
    Rectangle* rect = new Rectangle(QPointF(10, 20), QSizeF(30, 40));

    rect->setVisible(false);
    layer->addShape(rect);
    document->addLayer(layer);

    Shape* foundShape = document->getShapeAt(QPointF(25, 35));
    EXPECT_EQ(foundShape, nullptr);
}

TEST_F(DocumentTest, DocumentShapeRetrievalMultipleShapes) {
    Layer* layer = new Layer("Layer");

    Rectangle* rect1 = new Rectangle(QPointF(0, 0), QSizeF(50, 50));
    Rectangle* rect2 = new Rectangle(QPointF(25, 25), QSizeF(50, 50));

    layer->addShape(rect1);
    layer->addShape(rect2);
    document->addLayer(layer);

    Shape* foundShape = document->getShapeAt(QPointF(30, 30));
    EXPECT_EQ(foundShape, rect2);
}

TEST_F(DocumentTest, DocumentGetAllShapes) {
    Layer* layer1 = new Layer("Layer 1");
    Layer* layer2 = new Layer("Layer 2");

    Rectangle* rect = new Rectangle();
    Ellipse* ellipse = new Ellipse();

    layer1->addShape(rect);
    layer2->addShape(ellipse);

    document->addLayer(layer1);
    document->addLayer(layer2);

    QList<Shape*> allShapes = document->getAllShapes();
    EXPECT_EQ(allShapes.size(), 2);
    EXPECT_TRUE(allShapes.contains(rect));
    EXPECT_TRUE(allShapes.contains(ellipse));
}

TEST_F(DocumentTest, DocumentGetAllShapesEmptyDocument) {
    document->clear();
    QList<Shape*> allShapes = document->getAllShapes();
    EXPECT_EQ(allShapes.size(), 0);
}

TEST_F(DocumentTest, DocumentGetAllShapesInvisibleLayers) {
    Layer* visibleLayer = new Layer("Visible");
    Layer* invisibleLayer = new Layer("Invisible");

    Rectangle* rect1 = new Rectangle();
    Rectangle* rect2 = new Rectangle();

    visibleLayer->addShape(rect1);
    invisibleLayer->addShape(rect2);
    invisibleLayer->setVisible(false);

    document->addLayer(visibleLayer);
    document->addLayer(invisibleLayer);

    QList<Shape*> allShapes = document->getAllShapes();
    EXPECT_EQ(allShapes.size(), 1);
    EXPECT_TRUE(allShapes.contains(rect1));
    EXPECT_FALSE(allShapes.contains(rect2));
}

TEST_F(DocumentTest, DocumentLayerShapeIntegration) {
    Layer* backgroundLayer = new Layer("Background");
    Layer* foregroundLayer = new Layer("Foreground");

    Rectangle* background = new Rectangle(QPointF(0, 0), QSizeF(800, 600));
    Rectangle* box1 = new Rectangle(QPointF(100, 100), QSizeF(200, 150));
    Ellipse* circle = new Ellipse(QPointF(400, 200), QSizeF(100, 100));

    backgroundLayer->addShape(background);
    foregroundLayer->addShape(box1);
    foregroundLayer->addShape(circle);

    document->addLayer(backgroundLayer);
    document->addLayer(foregroundLayer);

    EXPECT_EQ(document->getLayers().size(), 3);
    EXPECT_EQ(backgroundLayer->getShapes().size(), 1);
    EXPECT_EQ(foregroundLayer->getShapes().size(), 2);

    Shape* found = document->getShapeAt(QPointF(150, 125));
    EXPECT_EQ(found, box1);

    found = document->getShapeAt(QPointF(450, 250));
    EXPECT_EQ(found, circle);

    found = document->getShapeAt(QPointF(50, 50));
    EXPECT_EQ(found, background);
}

TEST_F(DocumentTest, DocumentErrorHandling) {
    EXPECT_NO_THROW(document->removeLayer(nullptr));

    Layer* layer = new Layer("Test");
    EXPECT_NO_THROW(document->removeLayer(layer));
    delete layer;

    EXPECT_NO_THROW(document->clear());
}

TEST_F(DocumentTest, DocumentMemoryManagement) {
    Layer* layer = new Layer("Test Layer");
    Rectangle* rect = new Rectangle();

    layer->addShape(rect);
    document->addLayer(layer);

    document->clear();
    EXPECT_EQ(document->getLayers().size(), 0);
}